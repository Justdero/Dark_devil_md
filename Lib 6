

let axios = require('axios')
let BodyForm = require('form-data')
let { fromBuffer } = require('file-type')
let fetch = require('node-fetch')
let fs = require('fs')
let cheerio = require('cheerio')



function TelegraPh (Path) {
        return new Promise (async (resolve, reject) => {
                if (!fs.existsSync(Path)) return reject(new Error("File not Found"))
                try {
                        const form = new BodyForm();
                        form.append("file", fs.createReadStream(Path))
                        const data = await  axios({
                                url: "https://telegra.ph/upload",
                                method: "POST",
                                headers: {
                                        ...form.getHeaders()
                                },
                                data: form
                        })
                        return resolve("https://telegra.ph" + data.data[0].src)
                } catch (err) {
                        return reject(new Error(String(err)))
                }
        })
}

async function UploadFileUgu (input) {
        return new Promise (async (resolve, reject) => {
                        const form = new BodyForm();
                        form.append("files[]", fs.createReadStream(input))
                        await axios({
                                url: "https://uguu.se/upload.php",
                                method: "POST",
                                headers: {
                                        "User-Agent": "Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/90.0.4430.212 Safari/537.36",
                                        ...form.getHeaders()
                                },
                                data: form
                        }).then((data) => {
                                resolve(data.data.files[0])
                        }).catch((err) => reject(err))
        })
}

function webp2mp4File(path) {
        return new Promise((resolve, reject) => {
                 const form = new BodyForm()
                 form.append('new-image-url', '')
                 form.append('new-image', fs.createReadStream(path))
                 axios({
                          method: 'post',
                          url: 'https://s6.ezgif.com/webp-to-mp4',
                          data: form,
                          headers: {
                                   'Content-Type': `multipart/form-data; boundary=${form._boundary}`
                          }
                 }).then(({ data }) => {
                          const bodyFormThen = new BodyForm()
                          const $ = cheerio.load(data)
                          const file = $('input[name="file"]').attr('value')
                          bodyFormThen.append('file', file)
                          bodyFormThen.append('convert', "Convert WebP to MP4!")
                          axios({
                                   method: 'post',
                                   url: 'https://ezgif.com/webp-to-mp4/' + file,
                                   data: bodyFormThen,
                                   headers: {
                                                'Content-Type': `multipart/form-data; boundary=${bodyFormThen._boundary}`
                                   }
                          }).then(({ data }) => {
                                   const $ = cheerio.load(data)
                                   const result = 'https:' + $('div#output > p.outfile > video > source').attr('src')
                                   resolve({
                                                status: true,
                                                message: "Created By MRHRTZ",
                                                result: result
                                   })
                          }).catch(reject)
                 }).catch(reject)
        })
}

async function floNime(medianya, options = {}) {
const { ext } = await fromBuffer(medianya) || options.ext
        var form = new BodyForm()
        form.append('file', medianya, 'tmp.'+ext)
        let jsonnya = await fetch('https://flonime.my.id/upload', {
                method: 'POST',
                body: form
        })
        .then((response) => response.json())
        return jsonnya
}

module.exports = { TelegraPh, UploadFileUgu, webp2mp4File, floNime }
const fs = require("fs");
const toMs = require("ms");

const premium = JSON.parse(fs.readFileSync('./dtbs/premium.json'))
/**
 * Add premium user.
 * @param {String} userId
 * @param {String} expired
 * @param {Object} _dir
 */
const addPremiumUser = (userId, expired, _dir) => {
	const cekUser = premium.find((user) => user.id == userId);
	if (cekUser) {
		cekUser.expired = cekUser.expired + toMs(expired);
	} else {
		const obj = { id: userId, expired: Date.now() + toMs(expired) };
		_dir.push(obj);
	}
	fs.writeFileSync("./dtbs/premium.json", JSON.stringify(_dir));
};

/**
 * Get premium user position.
 * @param {String} userId
 * @param {Object} _dir
 * @returns {Number}
 */
const getPremiumPosition = (userId, _dir) => {
	let position = null;
	Object.keys(_dir).forEach((i) => {
		if (_dir[i].id === userId) {
			position = i;
		}
	});
	if (position !== null) {
		return position;
	}
};

/**
 * Get premium user expire.
 * @param {String} userId
 * @param {Object} _dir
 * @returns {Number}
 */
const getPremiumExpired = (userId, _dir) => {
	let position = null;
	Object.keys(_dir).forEach((i) => {
		if (_dir[i].id === userId) {
			position = i;
		}
	});
	if (position !== null) {
		return _dir[position].expired;
	}
};

/**
 * Check user is premium.
 * @param {String} userId
 * @param {Object} _dir
 * @returns {Boolean}
 */
const checkPremiumUser = (userId, _dir) => {
	let status = false;
	Object.keys(_dir).forEach((i) => {
		if (_dir[i].id === userId) {
			status = true;
		}
	});
	return status;
};

/**
 * Constantly checking premium.
 * @param {Object} _dir
 */
const expiredCheck = (ryokun, msg, _dir) => {
	setInterval(() => {
		let position = null;
		Object.keys(_dir).forEach((i) => {
			if (Date.now() >= _dir[i].expired) {
				position = i;
			}
		});
		if (position !== null) {
			idny = _dir[position].id;
			console.log(`Premium expired: ${_dir[position].id}`);
			_dir.splice(position, 1);
			fs.writeFileSync("./dtbs/premium.json", JSON.stringify(_dir));
			idny ? ryokun.sendMessage(idny, { text: "Premium anda sudah habis silahkan untuk membeli lagi." }) : "";
			idny = false;
		}
	}, 1000);
};

/**
 * Get all premium user ID.
 * @param {Object} _dir
 * @returns {String[]}
 */
const getAllPremiumUser = (_dir) => {
	const array = [];
	Object.keys(_dir).forEach((i) => {
		array.push(_dir[i].id);
	});
	return array;
};

module.exports = {
	addPremiumUser,
	getPremiumExpired,
	getPremiumPosition,
	expiredCheck,
	checkPremiumUser,
	getAllPremiumUser,
};
