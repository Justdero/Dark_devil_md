I//base by DGXeon
//re-upload? recode? copy code? give credit ya :)
//YouTube: @derickmogoa
//Instagram: official._dero_
//Telegram: t.me/dero
//GitHub: @justdero
//WhatsApp: +254741652519
//want more free bot scripts? subscribe to my youtube channel: https://youtube.com/@derickmogoa

const fs = require('fs')
const path = require('path')
const { spawn } = require('child_process')

function ffmpeg(buffer, args = [], ext = '', ext2 = '') {
  return new Promise(async (resolve, reject) => {
    try {
      let tmp = path.join(__dirname, '../src', + new Date + '.' + ext)
      let out = tmp + '.' + ext2
      await fs.promises.writeFile(tmp, buffer)
      spawn('ffmpeg', [
        '-y',
        '-i', tmp,
        ...args,
        out
      ])
        .on('error', reject)
        .on('close', async (code) => {
          try {
            await fs.promises.unlink(tmp)
            if (code !== 0) return reject(code)
            resolve(await fs.promises.readFile(out))
            await fs.promises.unlink(out)
          } catch (e) {
            reject(e)
          }
        })
    } catch (e) {
      reject(e)
    }
  })
}

/**
 * Convert Audio to Playable WhatsApp Audio
 * @param {Buffer} buffer Audio Buffer
 * @param {String} ext File Extension 
 */
function toAudio(buffer, ext) {
  return ffmpeg(buffer, [
    '-vn',
    '-ac', '2',
    '-b:a', '128k',
    '-ar', '44100',
    '-f', 'mp3'
  ], ext, 'mp3')
}

/**
 * Convert Audio to Playable WhatsApp PTT
 * @param {Buffer} buffer Audio Buffer
 * @param {String} ext File Extension 
 */
function toPTT(buffer, ext) {
  return ffmpeg(buffer, [
    '-vn',
    '-c:a', 'libopus',
    '-b:a', '128k',
    '-vbr', 'on',
    '-compression_level', '10'
  ], ext, 'opus')
}

/**
 * Convert Audio to Playable WhatsApp Video
 * @param {Buffer} buffer Video Buffer
 * @param {String} ext File Extension 
 */
function toVideo(buffer, ext) {
  return ffmpeg(buffer, [
    '-c:v', 'libx264',
    '-c:a', 'aac',
    '-ab', '128k',
    '-ar', '44100',
    '-crf', '32',
    '-preset', 'slow'
  ], ext, 'mp4')
}

module.exports = {
  toAudio,
  toPTT,
  toVideo,
  ffmpeg,
}
const fs = require('fs') 
 const { tmpdir } = require("os") 
 const Crypto = require("crypto") 
 const ff = require('fluent-ffmpeg') 
 const webp = require("node-webpmux") 
 const path = require("path") 
  
  
 async function imageToWebp (media) { 
  
     const tmpFileOut = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`) 
     const tmpFileIn = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.jpg`) 
  
     fs.writeFileSync(tmpFileIn, media) 
  
     await new Promise((resolve, reject) => { 
         ff(tmpFileIn) 
             .on("error", reject) 
             .on("end", () => resolve(true)) 
             .addOutputOptions([ 
                 "-vcodec", 
                 "libwebp", 
                 "-vf", 
                 "scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse" 
             ]) 
             .toFormat("webp") 
             .save(tmpFileOut) 
     }) 
  
     const buff = fs.readFileSync(tmpFileOut) 
     fs.unlinkSync(tmpFileOut) 
     fs.unlinkSync(tmpFileIn) 
     return buff 
 } 
  
 async function videoToWebp (media) { 
  
     const tmpFileOut = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`) 
     const tmpFileIn = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.mp4`) 
  
     fs.writeFileSync(tmpFileIn, media) 
  
     await new Promise((resolve, reject) => { 
         ff(tmpFileIn) 
             .on("error", reject) 
             .on("end", () => resolve(true)) 
             .addOutputOptions([ 
                 "-vcodec", 
                 "libwebp", 
                 "-vf", 
                 "scale='min(320,iw)':min'(320,ih)':force_original_aspect_ratio=decrease,fps=15, pad=320:320:-1:-1:color=white@0.0, split [a][b]; [a] palettegen=reserve_transparent=on:transparency_color=ffffff [p]; [b][p] paletteuse", 
                 "-loop", 
                 "0", 
                 "-ss", 
                 "00:00:00", 
                 "-t", 
                 "00:00:05", 
                 "-preset", 
                 "default", 
                 "-an", 
                 "-vsync", 
                 "0" 
             ]) 
             .toFormat("webp") 
             .save(tmpFileOut) 
     }) 
  
     const buff = fs.readFileSync(tmpFileOut) 
     fs.unlinkSync(tmpFileOut) 
     fs.unlinkSync(tmpFileIn) 
     return buff 
 } 
  
 async function writeExifImg (media, metadata) { 
     let wMedia = await imageToWebp(media) 
     const tmpFileIn = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`) 
     const tmpFileOut = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`) 
     fs.writeFileSync(tmpFileIn, wMedia) 
  
     if (metadata.packname || metadata.author) { 
         const img = new webp.Image() 
         const json = { "sticker-pack-id": `https://github.com/DikaArdnt/Hisoka-Morou`, "sticker-pack-name": metadata.packname, "sticker-pack-publisher": metadata.author, "emojis": metadata.categories ? metadata.categories : [""] } 
         const exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00]) 
         const jsonBuff = Buffer.from(JSON.stringify(json), "utf-8") 
         const exif = Buffer.concat([exifAttr, jsonBuff]) 
         exif.writeUIntLE(jsonBuff.length, 14, 4) 
         await img.load(tmpFileIn) 
         fs.unlinkSync(tmpFileIn) 
         img.exif = exif 
         await img.save(tmpFileOut) 
         return tmpFileOut 
     } 
 } 
  
 async function writeExifVid (media, metadata) { 
     let wMedia = await videoToWebp(media) 
     const tmpFileIn = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`) 
     const tmpFileOut = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`) 
     fs.writeFileSync(tmpFileIn, wMedia) 
  
     if (metadata.packname || metadata.author) { 
         const img = new webp.Image() 
         const json = { "sticker-pack-id": `https://github.com/DikaArdnt/Hisoka-Morou`, "sticker-pack-name": metadata.packname, "sticker-pack-publisher": metadata.author, "emojis": metadata.categories ? metadata.categories : [""] } 
         const exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00]) 
         const jsonBuff = Buffer.from(JSON.stringify(json), "utf-8") 
         const exif = Buffer.concat([exifAttr, jsonBuff]) 
         exif.writeUIntLE(jsonBuff.length, 14, 4) 
         await img.load(tmpFileIn) 
         fs.unlinkSync(tmpFileIn) 
         img.exif = exif 
         await img.save(tmpFileOut) 
         return tmpFileOut 
     } 
 } 
  
 async function writeExif (media, metadata) { 
     let wMedia = /webp/.test(media.mimetype) ? media.data : /image/.test(media.mimetype) ? await imageToWebp(media.data) : /video/.test(media.mimetype) ? await videoToWebp(media.data) : "" 
     const tmpFileIn = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`) 
     const tmpFileOut = path.join(tmpdir(), `${Crypto.randomBytes(6).readUIntLE(0, 6).toString(36)}.webp`) 
     fs.writeFileSync(tmpFileIn, wMedia) 
  
     if (metadata.packname || metadata.author) { 
         const img = new webp.Image() 
         const json = { "sticker-pack-id": `https://github.com/DikaArdnt/Hisoka-Morou`, "sticker-pack-name": metadata.packname, "sticker-pack-publisher": metadata.author, "emojis": metadata.categories ? metadata.categories : [""] } 
         const exifAttr = Buffer.from([0x49, 0x49, 0x2A, 0x00, 0x08, 0x00, 0x00, 0x00, 0x01, 0x00, 0x41, 0x57, 0x07, 0x00, 0x00, 0x00, 0x00, 0x00, 0x16, 0x00, 0x00, 0x00]) 
         const jsonBuff = Buffer.from(JSON.stringify(json), "utf-8") 
         const exif = Buffer.concat([exifAttr, jsonBuff]) 
         exif.writeUIntLE(jsonBuff.length, 14, 4) 
         await img.load(tmpFileIn) 
         fs.unlinkSync(tmpFileIn) 
         img.exif = exif 
         await img.save(tmpFileOut) 
         return tmpFileOut 
     } 
 } 
  
 module.exports = { imageToWebp, videoToWebp, writeExifImg, writeExifVid, writeExif }
const { proto, delay, getContentType } = require('@whiskeysockets/baileys') 
 const chalk = require('chalk') 
 const fs = require('fs') 
 const Crypto = require('crypto') 
 const axios = require('axios') 
 const moment = require('moment-timezone') 
 const { sizeFormatter } = require('human-readable') 
 const util = require('util') 
 const Jimp = require('jimp') 
 const { defaultMaxListeners } = require('stream') 
  
  
 const unixTimestampSeconds = (date = new Date()) => Math.floor(date.getTime() / 1000) 
  
 exports.unixTimestampSeconds = unixTimestampSeconds 
  
 exports.generateMessageTag = (epoch) => { 
     let tag = (0, exports.unixTimestampSeconds)().toString(); 
     if (epoch) 
         tag += '.--' + epoch; // attach epoch if provided 
     return tag; 
 } 
  
 exports.processTime = (timestamp, now) => { 
         return moment.duration(now - moment(timestamp * 1000)).asSeconds() 
 } 
  
 exports.getRandom = (ext) => { 
     return `${Math.floor(Math.random() * 10000)}${ext}` 
 } 
  
 exports.getBuffer = async (url, options) => { 
         try { 
                 options ? options : {} 
                 const res = await axios({ 
                         method: "get", 
                         url, 
                         headers: { 
                                 'DNT': 1, 
                                 'Upgrade-Insecure-Request': 1 
                         }, 
                         ...options, 
                         responseType: 'arraybuffer' 
                 }) 
                 return res.data 
         } catch (err) { 
                 return err 
         } 
 } 
  
 exports.fetchJson = async (url, options) => { 
     try { 
         options ? options : {} 
         const res = await axios({ 
             method: 'GET', 
             url: url, 
             headers: { 
                 'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/95.0.4638.69 Safari/537.36' 
             }, 
             ...options 
         }) 
         return res.data 
     } catch (err) { 
         return err 
     } 
 } 
  
 exports.runtime = function(seconds) { 
         seconds = Number(seconds); 
         var d = Math.floor(seconds / (3600 * 24)); 
         var h = Math.floor(seconds % (3600 * 24) / 3600); 
         var m = Math.floor(seconds % 3600 / 60); 
         var s = Math.floor(seconds % 60); 
         var dDisplay = d > 0 ? d + (d == 1 ? " day, " : " days, ") : ""; 
         var hDisplay = h > 0 ? h + (h == 1 ? " hour, " : " hours, ") : ""; 
         var mDisplay = m > 0 ? m + (m == 1 ? " minute, " : " minutes, ") : ""; 
         var sDisplay = s > 0 ? s + (s == 1 ? " second" : " seconds") : ""; 
         return dDisplay + hDisplay + mDisplay + sDisplay; 
 } 
  
 exports.clockString = (ms) => { 
     let h = isNaN(ms) ? '--' : Math.floor(ms / 3600000) 
     let m = isNaN(ms) ? '--' : Math.floor(ms / 60000) % 60 
     let s = isNaN(ms) ? '--' : Math.floor(ms / 1000) % 60 
     return [h, m, s].map(v => v.toString().padStart(2, 0)).join(':') 
 } 
  
 exports.sleep = async (ms) => { 
     return new Promise(resolve => setTimeout(resolve, ms)); 
 } 
  
 exports.isUrl = (url) => { 
     return url.match(new RegExp(/https?:\/\/(www\.)?[-a-zA-Z0-9@:%._+~#=]{1,256}\.[a-zA-Z0-9()]{1,6}\b([-a-zA-Z0-9()@:%_+.~#?&/=]*)/, 'gi')) 
 } 
  
 exports.getTime = (format, date) => { 
         if (date) { 
                 return moment(date).locale('id').format(format) 
         } else { 
                 return moment.tz('Africa/Harare').locale('id').format(format) 
         } 
 } 
  
 exports.formatDate = (n, locale = 'zw') => { 
         let d = new Date(n) 
         return d.toLocaleDateString(locale, { 
                 weekday: 'long', 
                 day: 'numeric', 
                 month: 'long', 
                 year: 'numeric', 
                 hour: 'numeric', 
                 minute: 'numeric', 
                 second: 'numeric' 
         }) 
 } 
  
 exports.tanggal = (numer) => { 
         myMonths = ["January","February","March","Aprill","May","June","July","August","September","October","November","Deceember"]; 
                                 myDays = ['Monday','Tuesday','Wednesday','Thursday','Friday','Saturday','Sunday'];  
                                 var tgl = new Date(numer); 
                                 var day = tgl.getDate() 
                                 bulan = tgl.getMonth() 
                                 var thisDay = tgl.getDay(), 
                                 thisDay = myDays[thisDay]; 
                                 var yy = tgl.getYear() 
                                 var year = (yy < 1000) ? yy + 1900 : yy;  
                                 const time = moment.tz('Africa/Harare').format('DD/MM HH:mm:ss') 
                                 let d = new Date 
                                 let locale = 'id' 
                                 let gmt = new Date(0).getTime() - new Date('1 January 1970').getTime() 
                                 let weton = ['Pahing', 'Pon','Wage','Kliwon','Legi'][Math.floor(((d * 1) + gmt) / 84600000) % 5] 
  
                                 return`${thisDay}, ${day} - ${myMonths[bulan]} - ${year}` 
 } 
  
 exports.formatp = sizeFormatter({ 
     std: 'JEDEC', //'SI' = default | 'IEC' | 'JEDEC' 
     decimalPlaces: 2, 
     keepTrailingZeroes: false, 
     render: (literal, symbol) => `${literal} ${symbol}B`, 
 }) 
  
 exports.jsonformat = (string) => { 
     return JSON.stringify(string, null, 2) 
 } 
  
 function format(...args) { 
         return util.format(...args) 
 } 
  
 exports.logic = (check, inp, out) => { 
         if (inp.length !== out.length) throw new Error('Input and Output must have same length') 
         for (let i in inp) 
                 if (util.isDeepStrictEqual(check, inp[i])) return out[i] 
         return null 
 } 
  
 exports.generateProfilePicture = async (buffer) => { 
         const jimp = await Jimp.read(buffer) 
         const min = jimp.getWidth() 
         const max = jimp.getHeight() 
         const cropped = jimp.crop(0, 0, min, max) 
         return { 
                 img: await cropped.scaleToFit(720, 720).getBufferAsync(Jimp.MIME_JPEG), 
                 preview: await cropped.scaleToFit(720, 720).getBufferAsync(Jimp.MIME_JPEG) 
         } 
 } 
  
 exports.bytesToSize = (bytes, decimals = 2) => { 
     if (bytes === 0) return '0 Bytes'; 
  
     const k = 1024; 
     const dm = decimals < 0 ? 0 : decimals; 
     const sizes = ['Bytes', 'KB', 'MB', 'GB', 'TB', 'PB', 'EB', 'ZB', 'YB']; 
  
     const i = Math.floor(Math.log(bytes) / Math.log(k)); 
  
     return parseFloat((bytes / Math.pow(k, i)).toFixed(dm)) + ' ' + sizes[i]; 
 } 
  
 exports.getSizeMedia = (path) => { 
     return new Promise((resolve, reject) => { 
         if (/http/.test(path)) { 
             axios.get(path) 
             .then((res) => { 
                 let length = parseInt(res.headers['content-length']) 
                 let size = exports.bytesToSize(length, 3) 
                 if(!isNaN(length)) resolve(size) 
             }) 
         } else if (Buffer.isBuffer(path)) { 
             let length = Buffer.byteLength(path) 
             let size = exports.bytesToSize(length, 3) 
             if(!isNaN(length)) resolve(size) 
         } else { 
             reject('error gatau apah') 
         } 
     }) 
 } 
  
 exports.parseMention = (text = '') => { 
     return [...text.matchAll(/@([0-9]{5,16}|0)/g)].map(v => v[1] + '@s.whatsapp.net') 
 } 
  
  
 /** 
  * Serialize Message 
  * @param {WAConnection} conn  
  * @param {Object} m  
  * @param {store} store  
  */ 
 exports.smsg = (conn, m, store) => { 
     if (!m) return m 
     let M = proto.WebMessageInfo 
     if (m.key) { 
         m.id = m.key.id 
         m.isBaileys = m.id.startsWith('BAE5') && m.id.length === 16 
         m.chat = m.key.remoteJid 
         m.fromMe = m.key.fromMe 
         m.isGroup = m.chat.endsWith('@g.us') 
         m.sender = conn.decodeJid(m.fromMe && conn.user.id || m.participant || m.key.participant || m.chat || '') 
         if (m.isGroup) m.participant = conn.decodeJid(m.key.participant) || '' 
     } 
     if (m.message) { 
         m.mtype = getContentType(m.message) 
         m.msg = (m.mtype == 'viewOnceMessage' ? m.message[m.mtype].message[getContentType(m.message[m.mtype].message)] : m.message[m.mtype]) 
         m.body = m.message.conversation || m.msg.caption || m.msg.text || (m.mtype == 'listResponseMessage') && m.msg.singleSelectReply.selectedRowId || (m.mtype == 'buttonsResponseMessage') && m.msg.selectedButtonId || (m.mtype == 'viewOnceMessage') && m.msg.caption || m.text 
         let quoted = m.quoted = m.msg.contextInfo ? m.msg.contextInfo.quotedMessage : null 
         m.mentionedJid = m.msg.contextInfo ? m.msg.contextInfo.mentionedJid : [] 
         if (m.quoted) { 
             let type = getContentType(quoted) 
                         m.quoted = m.quoted[type] 
             if (['productMessage'].includes(type)) { 
                                 type = getContentType(m.quoted) 
                                 m.quoted = m.quoted[type] 
                         } 
             if (typeof m.quoted === 'string') m.quoted = { 
                                 text: m.quoted 
                         } 
             m.quoted.mtype = type 
             m.quoted.id = m.msg.contextInfo.stanzaId 
                         m.quoted.chat = m.msg.contextInfo.remoteJid || m.chat 
             m.quoted.isBaileys = m.quoted.id ? m.quoted.id.startsWith('BAE5') && m.quoted.id.length === 16 : false 
                         m.quoted.sender = conn.decodeJid(m.msg.contextInfo.participant) 
                         m.quoted.fromMe = m.quoted.sender === (conn.user && conn.user.id) 
             m.quoted.text = m.quoted.text || m.quoted.caption || m.quoted.conversation || m.quoted.contentText || m.quoted.selectedDisplayText || m.quoted.title || '' 
                         m.quoted.mentionedJid = m.msg.contextInfo ? m.msg.contextInfo.mentionedJid : [] 
             m.getQuotedObj = m.getQuotedMessage = async () => { 
                         if (!m.quoted.id) return false 
                         let q = await store.loadMessage(m.chat, m.quoted.id, conn) 
                          return exports.smsg(conn, q, store) 
             } 
             let vM = m.quoted.fakeObj = M.fromObject({ 
                 key: { 
                     remoteJid: m.quoted.chat, 
                     fromMe: m.quoted.fromMe, 
                     id: m.quoted.id 
                 }, 
                 message: quoted, 
                 ...(m.isGroup ? { participant: m.quoted.sender } : {}) 
             }) 
  
             /** 
              *  
              * @returns  
              */ 
             m.quoted.delete = () => conn.sendMessage(m.quoted.chat, { delete: vM.key }) 
  
            /** 
                 *  
                 * @param {*} jid  
                 * @param {*} forceForward  
                 * @param {*} options  
                 * @returns  
            */ 
             m.quoted.copyNForward = (jid, forceForward = false, options = {}) => conn.copyNForward(jid, vM, forceForward, options) 
  
             /** 
               * 
               * @returns 
             */ 
             m.quoted.download = () => conn.downloadMediaMessage(m.quoted) 
         } 
     } 
     if (m.msg.url) m.download = () => conn.downloadMediaMessage(m.msg) 
     m.text = m.msg.text || m.msg.caption || m.message.conversation || m.msg.contentText || m.msg.selectedDisplayText || m.msg.title || '' 
     /** 
         * Reply to this message 
         * @param {String|Object} text  
         * @param {String|false} chatId  
         * @param {Object} options  
         */ 
     m.reply = (text, chatId = m.chat, options = {}) => Buffer.isBuffer(text) ? conn.sendMedia(chatId, text, 'file', '', m, { ...options }) : conn.sendText(chatId, text, m, { ...options }) 
     /** 
         * Copy this message 
         */ 
         m.copy = () => exports.smsg(conn, M.fromObject(M.toObject(m))) 
  
         /** 
          *  
          * @param {*} jid  
          * @param {*} forceForward  
          * @param {*} options  
          * @returns  
          */ 
         m.copyNForward = (jid = m.chat, forceForward = false, options = {}) => conn.copyNForward(jid, m, forceForward, options) 
  
     return m 
 } 
  
  
 let file = require.resolve(__filename) 
 fs.watchFile(file, () => { 
         fs.unwatchFile(file) 
         console.log(chalk.redBright(`Update ${__filename}`)) 
         delete require.cache[file] 
         require(file) 
 })
